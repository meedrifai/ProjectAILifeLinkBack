# Utiliser l'image officielle Python 3.13.3 slim
FROM python:3.13.3-slim

# Emp√™che les erreurs silencieuses
SHELL ["/bin/bash", "-c"]
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# D√©finir le r√©pertoire de travail
WORKDIR /app

# Installer curl (pour les health checks)
RUN set -e && \
    apt-get update && \
    apt-get install -y --no-install-recommends curl && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Copier et installer les d√©pendances
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Afficher les fichiers AVANT le COPY complet
RUN echo "=== AVANT COPY - Contenu actuel de /app ===" && ls -la /app

# Copier tous les fichiers dans le conteneur
COPY . .

# Analyse d√©taill√©e des fichiers apr√®s le COPY
RUN set -e && \
    echo "=== APR√àS COPY - Contenu de /app ===" && \
    ls -la /app && \
    echo "=== Recherche de fichiers .pkl ===" && \
    find /app -name "*.pkl" -type f -exec ls -la {} \; || echo "Aucun .pkl trouv√©" && \
    echo "=== V√©rification sp√©cifique : model.pkl ===" && \
    if [[ -f "/app/model.pkl" ]]; then \
        echo "‚úÖ model.pkl trouv√© !"; \
        ls -la /app/model.pkl; \
        file /app/model.pkl; \
        du -h /app/model.pkl; \
        md5sum /app/model.pkl; \
    else \
        echo "‚ùå model.pkl introuvable !"; \
        find /app -type f | head -20; \
        exit 1; \
    fi

# Test de lecture Python du fichier model.pkl (corrig√©)
RUN set -e && \
    echo "=== TEST DE LECTURE Python: model.pkl ===" && \
    python3 -c "import pickle, os, sys; \
print('Test de lecture model.pkl...'); \
model_path = '/app/model.pkl'; \
if os.path.exists(model_path): \
    try: \
        with open(model_path, 'rb') as f: \
            data = pickle.load(f); \
        print('‚úÖ model.pkl LISIBLE avec succ√®s !'); \
        print(f'Type de donn√©es: {type(data)}'); \
    except Exception as e: \
        print(f'‚ùå Erreur lors de la lecture de model.pkl : {e}'); \
        sys.exit(1); \
else: \
    print('‚ùå model.pkl introuvable lors du test Python'); \
    sys.exit(1)"

# V√©rification des fichiers Python source
RUN echo "=== V√âRIFICATION DES SOURCES ===" && \
    [[ -f "chatboot.py" ]] && echo "üìÑ chatboot.py :" && head -20 chatboot.py || echo "‚ùå chatboot.py introuvable" && \
    [[ -f "main.py" ]] && echo "üìÑ main.py :" && head -10 main.py || echo "‚ùå main.py introuvable"

# Exposer le port (ex. : pour Uvicorn / FastAPI)
EXPOSE 8000

# Lancer l'application avec logs d√©taill√©s
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--log-level", "debug"]
